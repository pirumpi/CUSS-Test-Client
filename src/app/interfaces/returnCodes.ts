/**
 * Common Use Self Service V2 API Definition
 * <h3>Definiton of the new CUSS2 API.</h3>This API definition idescribes IATA Common Use Self Service (IATA RP 1706c), a standard that allows multiple airlines to share physical kiosks or other hardware devices to offer self-services to their passengers. These services include, but are not limited to passenger check-in functionality and self-service baggage drop off. The standard also defines how airlines and other application suppliers can develop CUSS-compliant applications that are able to run on any device whose platform is CUSS-compliant.<br><br>The API definiton is accompanied by the CUSS Specification (CUSS-TS), describing in human readable form (textual and graphical) the concepts, requirements, interaction, workflows and behavior for both CUSS platforms and CUSS applications, and the CUSS Implementation Guide (CUSS-IG) describing best practices and giving examples on how to implement CUSS compliant platforms- and applications.<br><br>The API requires and includes further schema definitions/domains as<br><br>- CUSS2 Basic Schemas<br>- CUSS2 Self Bag Drop<br>- CUSS2 Biometrics<br>- CUSS2 Payments<br>- CUSS2 Illumination<br><br>The IATA Common Use Group (CUG) and the CUSS Technical Solution Group (CUSS-TSG) maintain this API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Interface Return Codes definitions with the following semantics...<br><br> RC_OK : Directive has been accepted by the CUSS interface <br> RC_STATE : Application is not in the correct state to invoke this directive <br> RC_DENIED : Application is not allowed to use that component <br> RC_PARAMETER : Error in parameters <br> RC_LISTENER : There is no application listener to respond to <br> RC_SHARE : Request in wrong share mode (the component may be blocked by any application) <br> RC_NOT_SUPPORTED : Unauthorized command within data stream (DF, SVG or AEA) <br> RC_ERROR : Any error that does not fall into the error categories above
 */
export type ReturnCodes = 'RC_OK' | 'RC_STATE' | 'RC_DENIED' | 'RC_PARAMETER' | 'RC_LISTENER' | 'RC_SHARE' | 'RC_NOT_SUPPORTED' | 'RC_ERROR';

export const ReturnCodes = {
    OK: 'RC_OK' as ReturnCodes,
    STATE: 'RC_STATE' as ReturnCodes,
    DENIED: 'RC_DENIED' as ReturnCodes,
    PARAMETER: 'RC_PARAMETER' as ReturnCodes,
    LISTENER: 'RC_LISTENER' as ReturnCodes,
    SHARE: 'RC_SHARE' as ReturnCodes,
    NOTSUPPORTED: 'RC_NOT_SUPPORTED' as ReturnCodes,
    ERROR: 'RC_ERROR' as ReturnCodes
};