/**
 * Common Use Self Service V2 API Definition
 * <h3>Definiton of the new CUSS2 API.</h3>This API definition idescribes IATA Common Use Self Service (IATA RP 1706c), a standard that allows multiple airlines to share physical kiosks or other hardware devices to offer self-services to their passengers. These services include, but are not limited to passenger check-in functionality and self-service baggage drop off. The standard also defines how airlines and other application suppliers can develop CUSS-compliant applications that are able to run on any device whose platform is CUSS-compliant.<br><br>The API definiton is accompanied by the CUSS Specification (CUSS-TS), describing in human readable form (textual and graphical) the concepts, requirements, interaction, workflows and behavior for both CUSS platforms and CUSS applications, and the CUSS Implementation Guide (CUSS-IG) describing best practices and giving examples on how to implement CUSS compliant platforms- and applications.<br><br>The API requires and includes further schema definitions/domains as<br><br>- CUSS2 Basic Schemas<br>- CUSS2 Self Bag Drop<br>- CUSS2 Biometrics<br>- CUSS2 Payments<br>- CUSS2 Illumination<br><br>The IATA Common Use Group (CUG) and the CUSS Technical Solution Group (CUSS-TSG) maintain this API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Virtual component types with the following semantics... <br><br> CAPTURE : Captures the document in a secured bin<br> DISPENSER : Offer the document to the user or the user<br> FEEDER : Offer the document from a feeder to another component (userless)<br> DATA_INPUT : Inbound data transfer (e.g. digital input)<br> DATA_OUTPUT : Outbound data transfer (e.g. illumination device)<br> USER_INPUT : Inbound user data transfer (e.g. baggage scale)<br> USER_OUTPUT : Outbound user data transfer (e.g. screen)<br> MEDIA_INPUT : Components used for reading from media (e.g. bar-code reader)<br> MEDIA_OUTPUT : Components used for writing to media (e.g. receipt printer)<br> STORAGE : Reading/writing from/to storage (e.g. harddisk)<br> DISPLAY : Handle a display (eg. the CUSS device screen)<br> NETWORK : Handle network access<br> BAGGAGE_SCALE : Represent a stand-alone baggage scale<br> INSERTION_BELT : Insert/return position of a conveyor system<br> VERIFICATION_BELT : Verification position of a conveyor system<br> PARKING_BELT : Parking position of a conveyor system<br> ANNOUNCEMENT : Audible output component allowing applications to use SSML<br> APPLICATION : Used to query the state and/or characteristics of a CUSS application<br>
 */
export type ComponentTypes = 'CAPTURE' | 'DISPENSER' | 'FEEDER' | 'DATA_INPUT' | 'DATA_OUTPUT' | 'USER_INPUT' | 'USER_OUTPUT' | 'MEDIA_INPUT' | 'MEDIA_OUTPUT' | 'STORAGE' | 'DISPLAY' | 'NETWORK' | 'BAGGAGE_SCALE' | 'INSERTION_BELT' | 'VERIFICATION_BELT' | 'PARKING_BELT' | 'ANNOUNCEMENT' | 'APPLICATION';

export const ComponentTypes = {
    CAPTURE: 'CAPTURE' as ComponentTypes,
    DISPENSER: 'DISPENSER' as ComponentTypes,
    FEEDER: 'FEEDER' as ComponentTypes,
    DATAINPUT: 'DATA_INPUT' as ComponentTypes,
    DATAOUTPUT: 'DATA_OUTPUT' as ComponentTypes,
    USERINPUT: 'USER_INPUT' as ComponentTypes,
    USEROUTPUT: 'USER_OUTPUT' as ComponentTypes,
    MEDIAINPUT: 'MEDIA_INPUT' as ComponentTypes,
    MEDIAOUTPUT: 'MEDIA_OUTPUT' as ComponentTypes,
    STORAGE: 'STORAGE' as ComponentTypes,
    DISPLAY: 'DISPLAY' as ComponentTypes,
    NETWORK: 'NETWORK' as ComponentTypes,
    BAGGAGESCALE: 'BAGGAGE_SCALE' as ComponentTypes,
    INSERTIONBELT: 'INSERTION_BELT' as ComponentTypes,
    VERIFICATIONBELT: 'VERIFICATION_BELT' as ComponentTypes,
    PARKINGBELT: 'PARKING_BELT' as ComponentTypes,
    ANNOUNCEMENT: 'ANNOUNCEMENT' as ComponentTypes,
    APPLICATION: 'APPLICATION' as ComponentTypes
};